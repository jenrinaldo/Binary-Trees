#include "binarytree.h"
#include <stddef.h>
#include <iostream>

// constructor
bTreeClass::bTreeClass() {
  for (int i = 0; i < ARRAY_MAX; i++) {
    arr[i] = -1;
  }
  numElements = 0;
  height = 0;
}

// destructor
bTreeClass::~bTreeClass() {

}

bool bTreeClass::insert(int element, bool& success) {
  if (numElements == ARRAY_MAX) {
    cout << "Tree is full." << endl;
    success = false;
    return success;
  }
  else {
    arr[numElements] = element;
    numElements++;
    success = true;
    return success;
  }
}

bool bTreeClass::deleteNode() {
  if (numElements == 0) {
    cout << "Tree is empty." << endl;
    return false;
  }
  else {
    arr[numElements] = -1;
    numElements--;
    return true;
  }
}

bool bTreeClass::deleteNode(bool& success, int& n) {
  if (numElements == 0) {
    cout << "Tree is empty." << endl;
    return false;
  }
  else {
    n = arr[numElements];
    arr[numElements] = -1;
    numElements--;
    return true;
  }
}

int bTreeClass::displayLevel(int element, bool &success) {
  int level = 0;

  return level;
}

bool bTreeClass::isEmpty() const {
  if (numElements == 0) {
    return true;
  }
  else {
    return false;
  }
}

void bTreeClass::inorder() const {
  for (int i = 0; i < numElements; i++) {
    cout << arr[i] << " ";
  }
  cout << endl;
}
void bTreeClass::preorder() const {
}
void bTreeClass::postorder() const {
}

int bTreeClass::HeightOfTree() const {
  return height;
}

int bTreeClass::NumberOfElements() const {
  return numElements;    
}
